version: '3.2'
networks:
 kong:
  driver: bridge
  name: kong-network 

services:
########### Main service ###############
  #######################################
  # Database: Postgres
  #######################################
  postgres-database:
    image: postgres:17.0-alpine3.20
    container_name: postgres-database
    environment:
      PGUSER: ${POSTGRES_USER}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /data/postgres
    ports:
      - '5432:5432'
    volumes:
      - postgres:/data/postgres
      - ./db/initdb.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 3s
      timeout: 20s
      retries: 8
    networks:
      - kong

  #######################################
  # Caching: Redis
  #######################################
  redis:
    image: redis:6.2-alpine
    container_name: redis
    hostname: redis
    ports:
      - '6370:6379'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - REDIS_DISABLE_COMMANDS=FLUSHDB;FLUSHALL
    networks:
      - default
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 3s
      timeout: 20s
      retries: 8
  #######################################
  # Message Queue: Kafka
  #######################################
 
  #######################################
  # Kong: API Gateway
  #######################################
  kong-gateway:
    container_name: gateway
    image: kong
    restart: always
    networks:
      - kong
    environment:
      KONG_DATABASE: "off"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_LOG_LEVEL: warn
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_PROXY_LISTEN: 0.0.0.0:8000, 0.0.0.0:8443 ssl, 0.0.0.0:9080 http2, 0.0.0.0:9081 http2 ssl
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 120s
      timeout: 10s
      retries: 3
    volumes:
    - ./gateway/logs:/usr/local/kong/logs       
    - ./gateway/logs/log.txt:/usr/local/kong/logs/log.txt       
    - ./gateway/declarative:/usr/local/kong/declarative       
    - ./gateway/config/nginx.conf:/usr/local/kong/nginx.conf       
    - ./gateway/config/nginx-kong.conf:/usr/local/kong/nginx-kong.conf       
    ports: # port register client 
      - "8000:8000" # authen-service
  

########### Monitoring ###############
  #######################################
  # Prometheus
  #######################################
  prometheus:
    container_name: prometheus
    image: prom/prometheus
    restart: always
    networks:
        - kong
    depends_on:
      - kong
    volumes: 
      - ./monitor/prometheus/config.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  #######################################
  # Grafana
  #######################################
  grafana:
    container_name: grafana
    image: grafana/grafana
    restart: always
    networks:
        - kong
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin        
    # volumes:
    #   - ./monitor/grafana/provisioning/:/etc/grafana/provisioning  
    #   - ./monitor/grafana/dashboards/:/var/lib/grafana/dashboards      
    #   - ./monitor/grafana/config.ini:/etc/grafana/config.ini      
    depends_on:
      - kong
      - prometheus
    ports:
      - "3000:3000"  

#############Logging && Searching############# 
  #######################################
  # elasticsearch
  #######################################
  elasticsearch:
    container_name: es-container
    image: docker.elastic.co/elasticsearch/elasticsearch:7.11.0
    environment:
      - xpack.security.enabled=false
      - "discovery.type=single-node"
    networks:
      - es-net
    ports:
      - 9200:9200

  #######################################
  # kibana
  #######################################
  kibana:
    container_name: kb-container
    image: docker.elastic.co/kibana/kibana:7.11.0
    environment:
      - ELASTICSEARCH_HOSTS=http://es-container:9200
    networks:
      - es-net
    depends_on:
      - elasticsearch
    ports:
      - 5601:5601

############# Reverse Proxy Domain (HTTPS) ############# 
  #######################################
  # NGINX
  #######################################
  nginx:
        container_name: nginx_reverse
        build:
            context: ./
            dockerfile: ./nginx
        restart: always
        volumes:
            - ./config/nginx.conf:/etc/nginx/nginx.conf
            - ./ssl:/etc/nginx/ssl
        ports:
            - "443:443"
            - "80:80"
        depends_on:
            - kong